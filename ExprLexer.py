# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,111,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,10,4,10,80,8,10,11,10,12,10,81,1,11,4,11,85,8,
        11,11,11,12,11,86,1,12,1,12,4,12,91,8,12,11,12,12,12,92,1,13,1,13,
        4,13,97,8,13,11,13,12,13,98,1,13,1,13,1,14,1,14,1,14,1,14,1,15,4,
        15,108,8,15,11,15,12,15,109,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,1,0,8,1,0,49,
        57,1,0,65,90,1,0,97,122,2,0,48,57,97,122,1,0,34,34,3,0,48,57,65,
        90,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,115,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,
        1,0,0,0,3,40,1,0,0,0,5,46,1,0,0,0,7,48,1,0,0,0,9,50,1,0,0,0,11,52,
        1,0,0,0,13,59,1,0,0,0,15,64,1,0,0,0,17,71,1,0,0,0,19,76,1,0,0,0,
        21,79,1,0,0,0,23,84,1,0,0,0,25,88,1,0,0,0,27,94,1,0,0,0,29,102,1,
        0,0,0,31,107,1,0,0,0,33,34,5,67,0,0,34,35,5,82,0,0,35,36,5,69,0,
        0,36,37,5,65,0,0,37,38,5,84,0,0,38,39,5,69,0,0,39,2,1,0,0,0,40,41,
        5,116,0,0,41,42,5,97,0,0,42,43,5,98,0,0,43,44,5,108,0,0,44,45,5,
        101,0,0,45,4,1,0,0,0,46,47,5,40,0,0,47,6,1,0,0,0,48,49,5,44,0,0,
        49,8,1,0,0,0,50,51,5,41,0,0,51,10,1,0,0,0,52,53,5,83,0,0,53,54,5,
        69,0,0,54,55,5,76,0,0,55,56,5,69,0,0,56,57,5,67,0,0,57,58,5,84,0,
        0,58,12,1,0,0,0,59,60,5,70,0,0,60,61,5,82,0,0,61,62,5,79,0,0,62,
        63,5,77,0,0,63,14,1,0,0,0,64,65,5,73,0,0,65,66,5,78,0,0,66,67,5,
        83,0,0,67,68,5,69,0,0,68,69,5,82,0,0,69,70,5,84,0,0,70,16,1,0,0,
        0,71,72,5,73,0,0,72,73,5,78,0,0,73,74,5,84,0,0,74,75,5,79,0,0,75,
        18,1,0,0,0,76,77,5,58,0,0,77,20,1,0,0,0,78,80,7,0,0,0,79,78,1,0,
        0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,22,1,0,0,0,83,85,
        7,1,0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,
        87,24,1,0,0,0,88,90,7,2,0,0,89,91,7,3,0,0,90,89,1,0,0,0,91,92,1,
        0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,26,1,0,0,0,94,96,7,4,0,0,95,
        97,7,5,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,
        0,99,100,1,0,0,0,100,101,7,4,0,0,101,28,1,0,0,0,102,103,7,6,0,0,
        103,104,1,0,0,0,104,105,6,14,0,0,105,30,1,0,0,0,106,108,7,7,0,0,
        107,106,1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,
        110,32,1,0,0,0,6,0,81,86,92,98,109,1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    ROW = 11
    COL = 12
    ID = 13
    STRING = 14
    WS = 15
    NEWLINE = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'CREATE'", "'table'", "'('", "','", "')'", "'SELECT'", "'FROM'", 
            "'INSERT'", "'INTO'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "ROW", "COL", "ID", "STRING", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "ROW", "COL", "ID", "STRING", 
                  "WS", "NEWLINE" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


