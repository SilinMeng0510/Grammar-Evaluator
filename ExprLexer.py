# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,128,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,4,12,97,8,12,11,12,12,12,98,
        1,13,4,13,102,8,13,11,13,12,13,103,1,14,1,14,4,14,108,8,14,11,14,
        12,14,109,1,15,1,15,4,15,114,8,15,11,15,12,15,115,1,15,1,15,1,16,
        1,16,1,16,1,16,1,17,4,17,125,8,17,11,17,12,17,126,0,0,18,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,1,0,8,1,0,49,57,1,0,65,90,1,0,97,122,2,0,48,
        57,97,122,1,0,34,34,3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,
        2,0,10,10,13,13,132,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,
        0,0,3,44,1,0,0,0,5,50,1,0,0,0,7,52,1,0,0,0,9,54,1,0,0,0,11,56,1,
        0,0,0,13,63,1,0,0,0,15,68,1,0,0,0,17,74,1,0,0,0,19,81,1,0,0,0,21,
        86,1,0,0,0,23,93,1,0,0,0,25,96,1,0,0,0,27,101,1,0,0,0,29,105,1,0,
        0,0,31,111,1,0,0,0,33,119,1,0,0,0,35,124,1,0,0,0,37,38,5,67,0,0,
        38,39,5,82,0,0,39,40,5,69,0,0,40,41,5,65,0,0,41,42,5,84,0,0,42,43,
        5,69,0,0,43,2,1,0,0,0,44,45,5,116,0,0,45,46,5,97,0,0,46,47,5,98,
        0,0,47,48,5,108,0,0,48,49,5,101,0,0,49,4,1,0,0,0,50,51,5,40,0,0,
        51,6,1,0,0,0,52,53,5,44,0,0,53,8,1,0,0,0,54,55,5,41,0,0,55,10,1,
        0,0,0,56,57,5,83,0,0,57,58,5,69,0,0,58,59,5,76,0,0,59,60,5,69,0,
        0,60,61,5,67,0,0,61,62,5,84,0,0,62,12,1,0,0,0,63,64,5,70,0,0,64,
        65,5,82,0,0,65,66,5,79,0,0,66,67,5,77,0,0,67,14,1,0,0,0,68,69,5,
        79,0,0,69,70,5,82,0,0,70,71,5,68,0,0,71,72,5,69,0,0,72,73,5,82,0,
        0,73,16,1,0,0,0,74,75,5,73,0,0,75,76,5,78,0,0,76,77,5,83,0,0,77,
        78,5,69,0,0,78,79,5,82,0,0,79,80,5,84,0,0,80,18,1,0,0,0,81,82,5,
        73,0,0,82,83,5,78,0,0,83,84,5,84,0,0,84,85,5,79,0,0,85,20,1,0,0,
        0,86,87,5,68,0,0,87,88,5,69,0,0,88,89,5,76,0,0,89,90,5,69,0,0,90,
        91,5,84,0,0,91,92,5,69,0,0,92,22,1,0,0,0,93,94,5,58,0,0,94,24,1,
        0,0,0,95,97,7,0,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,
        99,1,0,0,0,99,26,1,0,0,0,100,102,7,1,0,0,101,100,1,0,0,0,102,103,
        1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,28,1,0,0,0,105,107,7,
        2,0,0,106,108,7,3,0,0,107,106,1,0,0,0,108,109,1,0,0,0,109,107,1,
        0,0,0,109,110,1,0,0,0,110,30,1,0,0,0,111,113,7,4,0,0,112,114,7,5,
        0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,0,
        0,0,116,117,1,0,0,0,117,118,7,4,0,0,118,32,1,0,0,0,119,120,7,6,0,
        0,120,121,1,0,0,0,121,122,6,16,0,0,122,34,1,0,0,0,123,125,7,7,0,
        0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,
        0,127,36,1,0,0,0,6,0,98,103,109,115,126,1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    ROW = 13
    COL = 14
    ID = 15
    STRING = 16
    WS = 17
    NEWLINE = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'CREATE'", "'table'", "'('", "','", "')'", "'SELECT'", "'FROM'", 
            "'ORDER'", "'INSERT'", "'INTO'", "'DELETE'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "ROW", "COL", "ID", "STRING", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "ROW", "COL", 
                  "ID", "STRING", "WS", "NEWLINE" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


