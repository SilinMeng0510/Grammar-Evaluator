# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,135,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,4,12,99,8,12,11,
        12,12,12,100,1,13,4,13,104,8,13,11,13,12,13,105,1,14,1,14,4,14,110,
        8,14,11,14,12,14,111,1,15,1,15,4,15,116,8,15,11,15,12,15,117,1,15,
        1,15,1,16,1,16,1,16,1,16,1,17,4,17,127,8,17,11,17,12,17,128,1,18,
        4,18,132,8,18,11,18,12,18,133,0,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,1,0,9,1,0,49,57,1,0,65,90,1,0,97,122,2,0,48,57,97,122,1,0,
        34,34,3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,
        3,0,44,44,102,102,116,116,140,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,1,39,1,0,0,0,3,46,1,0,0,0,5,52,1,0,0,0,7,54,1,0,0,0,
        9,56,1,0,0,0,11,58,1,0,0,0,13,65,1,0,0,0,15,70,1,0,0,0,17,76,1,0,
        0,0,19,83,1,0,0,0,21,88,1,0,0,0,23,95,1,0,0,0,25,98,1,0,0,0,27,103,
        1,0,0,0,29,107,1,0,0,0,31,113,1,0,0,0,33,121,1,0,0,0,35,126,1,0,
        0,0,37,131,1,0,0,0,39,40,5,67,0,0,40,41,5,82,0,0,41,42,5,69,0,0,
        42,43,5,65,0,0,43,44,5,84,0,0,44,45,5,69,0,0,45,2,1,0,0,0,46,47,
        5,116,0,0,47,48,5,97,0,0,48,49,5,98,0,0,49,50,5,108,0,0,50,51,5,
        101,0,0,51,4,1,0,0,0,52,53,5,40,0,0,53,6,1,0,0,0,54,55,5,44,0,0,
        55,8,1,0,0,0,56,57,5,41,0,0,57,10,1,0,0,0,58,59,5,83,0,0,59,60,5,
        69,0,0,60,61,5,76,0,0,61,62,5,69,0,0,62,63,5,67,0,0,63,64,5,84,0,
        0,64,12,1,0,0,0,65,66,5,70,0,0,66,67,5,82,0,0,67,68,5,79,0,0,68,
        69,5,77,0,0,69,14,1,0,0,0,70,71,5,79,0,0,71,72,5,82,0,0,72,73,5,
        68,0,0,73,74,5,69,0,0,74,75,5,82,0,0,75,16,1,0,0,0,76,77,5,73,0,
        0,77,78,5,78,0,0,78,79,5,83,0,0,79,80,5,69,0,0,80,81,5,82,0,0,81,
        82,5,84,0,0,82,18,1,0,0,0,83,84,5,73,0,0,84,85,5,78,0,0,85,86,5,
        84,0,0,86,87,5,79,0,0,87,20,1,0,0,0,88,89,5,68,0,0,89,90,5,69,0,
        0,90,91,5,76,0,0,91,92,5,69,0,0,92,93,5,84,0,0,93,94,5,69,0,0,94,
        22,1,0,0,0,95,96,5,58,0,0,96,24,1,0,0,0,97,99,7,0,0,0,98,97,1,0,
        0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,26,1,0,0,0,
        102,104,7,1,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,
        105,106,1,0,0,0,106,28,1,0,0,0,107,109,7,2,0,0,108,110,7,3,0,0,109,
        108,1,0,0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,
        30,1,0,0,0,113,115,7,4,0,0,114,116,7,5,0,0,115,114,1,0,0,0,116,117,
        1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,120,
        7,4,0,0,120,32,1,0,0,0,121,122,7,6,0,0,122,123,1,0,0,0,123,124,6,
        16,0,0,124,34,1,0,0,0,125,127,7,7,0,0,126,125,1,0,0,0,127,128,1,
        0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,36,1,0,0,0,130,132,7,8,
        0,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,
        0,0,134,38,1,0,0,0,7,0,100,105,111,117,128,133,1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    ROW = 13
    COL = 14
    ID = 15
    STRING = 16
    WS = 17
    NEWLINE = 18
    BOOL = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'CREATE'", "'table'", "'('", "','", "')'", "'SELECT'", "'FROM'", 
            "'ORDER'", "'INSERT'", "'INTO'", "'DELETE'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "ROW", "COL", "ID", "STRING", "WS", "NEWLINE", "BOOL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "ROW", "COL", 
                  "ID", "STRING", "WS", "NEWLINE", "BOOL" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


